0011  1010           58  
****    ****           -58
10000 0000 

10000  0000  -  0011  1010  

1111  1111  + 1  - 0011  1010 

1111  1111  -  0011 1010  + 1 


1111  1111
0011  1010
1100   0101 +1 = 1100  0110 = -58

使用二进制表示负数时不可以使用-号
负数二进制的计算方法
1.求出相反数（对应非负数）的二进制
2.对这个二进制做按位求反加一
使用上述方法计算出的结果就是补码，可以直接存储在计算机里

0000  0000 

1000  0000
任何数据类型中有两个特殊的二进制数字分别是全0和首位为1其它位为0
后一个数用来表示这个数据类型中的最小数

-41的补码是多少？
41的二进制补码是0010 1001=32+8+1=41  
按位求反得到1101 0110 
加一得到结果1101 0111
32=0010  0000 
8  =0000  1000
1  =0000   0001

根据一个二进制补码计算相反数的二进制补码都可以采用上述办法
画图描述数字之间的关系十进制和二进制的转换的png
所有有符号数据的最高二进制位叫做符号位
符号位为0表示数字是非负数
符号位为1表示数字是负数
无符号数据没有符号位
符号位不能等同于正负号
1000 0000=-128    -000  0000=0不一样，符号位不能变成负号

整数类型之间赋值要保持二进制不变
有符号数据扩充的时候在前面补充符号位


C语言中可以使用(+,-,*,/和%)
,也可以当操作符使用
,可以把两个无关的表达式连接在一起
合并后的结果就是后一个表达式的结果
1+2, 3+4
,操作符的优先级非常低

赋值操作符(=)可以用来改变变量的内容
赋值操作符的左边必须是左值(变量)
赋值操作符的右边必须能当数字使用
赋值操作符的优先级很低，但是比逗号操作符高
一条语句中可以包含多个赋值操作符，它们的计算顺序是从右向左

双目操作符需要和两个数字联合使用
很多双目操作符可以和赋值操作符合并形成复合赋值操作符(+=,-=,*=,/=...)
复合赋值操作符也是双目操作符
复合赋值操作符也要求左边是变量，右边是可以当数字使用的
num += 6;等同于num = num + 6;
复合赋值操作符中的双目操作符优先级和赋值操作符一样低
自增（++）和自减（--）也是c语言中可以使用的操作符，用于对一个变量进行加一或减一操作。
它们都是单目操作符
它们只能对变量进行操作
分成前操作和后操作两种
前操作的优先级非常高，后操作的优先级最低
不要在一条语句中对同一个变量进行多次自增或自减计算（结果不确定）

