0011  1010           58  
****    ****           -58
10000 0000 

10000  0000  -  0011  1010  

1111  1111  + 1  - 0011  1010 

1111  1111  -  0011 1010  + 1 


1111  1111
0011  1010
1100   0101 +1 = 1100  0110 = -58

使用二进制表示负数时不可以使用-号
负数二进制的计算方法
1.求出相反数（对应非负数）的二进制
2.对这个二进制做按位求反加一
使用上述方法计算出的结果就是补码，可以直接存储在计算机里

0000  0000 

1000  0000
任何数据类型中有两个特殊的二进制数字分别是全0和首位为1其它位为0
后一个数用来表示这个数据类型中的最小数

-41的补码是多少？
41的二进制补码是0010 1001=32+8+1=41  
按位求反得到1101 0110 
加一得到结果1101 0111
32=0010  0000 
8  =0000  1000
1  =0000   0001

根据一个二进制补码计算相反数的二进制补码都可以采用上述办法
画图描述数字之间的关系十进制和二进制的转换的png
所有有符号数据的最高二进制位叫做符号位
符号位为0表示数字是非负数
符号位为1表示数字是负数
无符号数据没有符号位
符号位不能等同于正负号
1000 0000=-128    -000  0000=0不一样，符号位不能变成负号

整数类型之间赋值要保持二进制不变
有符号数据扩充的时候在前面补充符号位

0011  1010           58  
****    ****           -58
10000 0000 

10000  0000  -  0011  1010  

1111  1111  + 1  - 0011  1010 

1111  1111  -  0011 1010  + 1 


1111  1111
0011  1010
1100   0101 +1 = 1100  0110 = -58

使用二进制表示负数时不可以使用-号
负数二进制的计算方法
1.求出相反数（对应非负数）的二进制
2.对这个二进制做按位求反加一
使用上述方法计算出的结果就是补码，可以直接存储在计算机里

0000  0000 

1000  0000
任何数据类型中有两个特殊的二进制数字分别是全0和首位为1其它位为0
后一个数用来表示这个数据类型中的最小数

-41的补码是多少？
41的二进制补码是0010 1001=32+8+1=41  
按位求反得到1101 0110 
加一得到结果1101 0111
32=0010  0000 
8  =0000  1000
1  =0000   0001

根据一个二进制补码计算相反数的二进制补码都可以采用上述办法
画图描述数字之间的关系十进制和二进制的转换的png
所有有符号数据的最高二进制位叫做符号位
符号位为0表示数字是非负数
符号位为1表示数字是负数
无符号数据没有符号位
符号位不能等同于正负号
1000 0000=-128    -000  0000=0不一样，符号位不能变成负号

整数类型之间赋值要保持二进制不变
有符号数据扩充的时候在前面补充符号位


C语言中可以使用(+,-,*,/和%)
,也可以当操作符使用
,可以把两个无关的表达式连接在一起
合并后的结果就是后一个表达式的结果
1+2, 3+4
,操作符的优先级非常低

赋值操作符(=)可以用来改变变量的内容
赋值操作符的左边必须是左值(变量)
赋值操作符的右边必须能当数字使用
赋值操作符的优先级很低，但是比逗号操作符高
一条语句中可以包含多个赋值操作符，它们的计算顺序是从右向左

双目操作符需要和两个数字联合使用
很多双目操作符可以和赋值操作符合并形成复合赋值操作符(+=,-=,*=,/=...)
复合赋值操作符也是双目操作符
复合赋值操作符也要求左边是变量，右边是可以当数字使用的
num += 6;等同于num = num + 6;
复合赋值操作符中的双目操作符优先级和赋值操作符一样低
自增（++）和自减（--）也是c语言中可以使用的操作符，用于对一个变量进行加一或减一操作。
它们都是单目操作符
它们只能对变量进行操作
分成前操作和后操作两种
前操作的优先级非常高，后操作的优先级最低
不要在一条语句中对同一个变量进行多次自增或自减计算（结果不确定）
布尔值包括真(true)或假(false)
布尔类型(bool)用来描述布尔值
为了使用布尔类型需要把stdbool.h文件合并进来
布尔值在计算机内部仍然使用整数表示，真用1表示，假用0表示
C语言中所有整数都可以当布尔值使用，0当成false,所有其他整数都当成true

逻辑操作符用来编写逻辑表达式
逻辑表达式的计算结果必须是布尔值
双目逻辑操作符包括==,!=,>,<,>=,<=

!是一个单目逻辑操作符，它可以对一个布尔值求反
逻辑操作符比算数操作符的优先级低
3<7<5
3<7 && 7<5
多个逻辑关系之间需要使用与(&&)和或(||)连接
只有当所有基本表达式的计算结果都是true的时候与(&&)连接后的复杂表达式结果才是true，否则就是false
只要有一个基本逻辑表达式的计算结果是true，则用或(||)连接后的复杂表达式计算结果就是true

与(&&)和或(||)都具有短路特征，当前面的逻辑表达式能决定整个表达式的结果时后面的内容根本就不计算
练习：
     1.把年龄分成如下几个段落
          0  -- 10  儿童
          11 --19   少年
           20-- 35  青年
           36 -- 55  中年
           56 --       老年
有一个变量age记录了一个年龄数据，编写一个逻辑表达式当age变量中的年龄属于少年或中年的时候计算结果为true,
否则计算结果为false.
((age >= 11) && (age <= 19)) || ((age >= 36) && (age <= 55))

位操作符用来对二进制形式进行计算双目位操作符包括按位与(&),按位或(|)以及按位异或(^)
双目位操作符都是先把参与计算的数据的二进制形式表示出来，然后让两个数字的对应数位进行计算


按位与(&)把对应数位上的数字进行与计算
0  &  0   0 
0  &  1   0
1  &  1   1 

     3               0000  0011
&  5               0000  0101
                      0000  0001
按位与可以把一个数字中的某些二进制数位清楚成0
某个数位和0做按位与结果一定是0
某个数位和1做按位与结果不变


按位或(|)把对应数位上的数字进行或计算
0  | 0   0 
0  | 1   1  
1  | 1   1 

     3               0000  0011
|    5               0000  0101
                      0000  0111
按位或可以把一个数字中的某些数位设置成1
某个数位和0做按位或结果不变
某个数位和1做按位或则结果是1

按位异或(^)把对应数位上的数字进行异或计算
0 ^ 0   0
1 ^ 0   1
1 ^ 1   0

      3               0000  0011
^    5               0000  0101
                       0000  0110
按位异或可以把一个数字中的某些数位求反
某个数位和0做按位异或结果不变
某个数位和1做按位异或结果变成相反数字

预习：
1.其他位操作符
2.三目操作符
3.类型转换
4.分支（if,switch...case）
5.循环（for）
