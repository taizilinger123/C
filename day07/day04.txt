练习：
1.在屏幕上打印如下内容
54321
5432
543
54
5

预习：
1.循环语句（循环嵌套,while,do...while）

作业：
1.编写分支根据给定的年和月计算出当月的天数
2.使用循环解决鸡兔同笼问题
40个头，100只脚
3.使用循环解决砝码问题
4.使用循环把一个char类型变量中的每个二进制位打印在屏幕上

回顾：
1.移位操作
2.按位求反操作符
3.地址相关操作符
4.三目操作符
5.类型转换（隐式转换，强制转换）
6.分支语句（if,switch...case）
7.循环语句(for)
假设有一个for循环语句如下
for(1;2;3){
   4
}
for语句是分组执行的，分组方式如下
[1,2] [4,3,2] [4,3,2] [4,3,2]  ... [4,3,2]
第一组和后面所有组都不同
正常情况下for会在两个分组之间结束
编号为2的语句可以计算出一个布尔值，由这个布尔值
来决定下一个分组是否要执行
如果这个2布尔值是true则执行下一组，否则整个循环结束
当循环正常结束后编号为2的逻辑表达式计算结果一定是false
编号为4的语句有可能根本不执行
int num =0;
for(num = 4;(num -1) < 16; num *=2){
    printf("%d\n", num);
}

num = 4;
(4 - 1) < 16;

printf("%d\n", 4);
num *= 2;//num变成8
(8 -1) < 16

printf("%d\n", 8);
num *= 2; //num变成16
(16 - 1)<16

printf("%d\n", 16);
num *= 2; //num变成32
(32 - 1)<16
break;可以在循环的大括号中随时打断循环的执行。
如果循环是因为break;语句结束时，则结束时编号为2的逻辑表达式结果一定是true
continue;语句可以在大括号中直接跳转到大括号的末尾
continue;语句只会影响到某一次大括号内部语句的执行过程

54321
4321
321
21
1
循环嵌套结构可以解决复杂的循环问题
把复杂问题先分组，为每组找到一个代表数字。这个代表数字在组之间要规律变化。
循环嵌套是由两个循环构成的，其中一个循环包含另一个
这个两个循环各自使用一个循环变量描述一组规律变化的数字
内循环的开始数字和结束数字可能需要利用外循环的循环变量来表示

练习：
1.打印如下图案
*
**
***
****
*****
2.假设货币有三种面值：1元，2元和5元编程计算用这些面值的货币表示10元钱有多少种可能

for循环的多种写法
1.省略大括号
2.使用,操作符
3.临时定义循环变量（c99规范才支持）gcc -std=c99  10for.c
4.小括号中只保留逻辑表达式
5.空语句
6.死循环

while语句也是c语言中一种用来实现循环的语句
只需要知道循环结束的条件就可以使用while语句编写循环
for语句和while理论上完全可以互相替代
while循环语句的格式如下
while(逻辑表达式){
    反复执行的语句
}
如果逻辑表达式的结果是true,则反复执行大括号里的所有语句

练习：
1.编写程序不停从键盘读整数，如果读到的是非负数则再次读，直到是负数的时候结束。

假设有如下的while循环语句
while(1){
   2
}
while循环也是分组执行的，执行方式如下
[1]  [2,1] [2,1]  ...... [2,1]
每组的最后一步都是编号为1的逻辑表达式，它决定下一组是否要开始
如果逻辑表达式的结果是true,则开始下一组，否则循环结束
while语句中大括号内部的语句有可能根本就不会执行
while语句也可以实现空语句和死循环
while语句的死循环格式如下
while(1){
}
while语句中也可以使用break;和continue;语句

练习：
1.把刚才的练习改成读到0的时候结束

do...while也是一种实现循环的语句
使用这种语句实现的循环至少会执行一遍
假设有如下的循环语句
do {
    2
}while(1);
它的执行方式如下
[2,1] [2,1]....[2,1]
相当于把while循环的第一组丢掉了
do...while语句中一定要在逻辑表达式后面加上;

输入如下两条语句可以清除输入缓冲区中当次输入的所有信息
scanf("%*[^\n]");
scanf("%*c");

scanf标准函数在结束的时候会遗留一个数字如果这个遗留数字是0则表示它没有正确读到数据
把scanf的函数调用语句当数字使用就可以表示它的遗留数字

goto也是一条流程控制语句
goto语句可以任意指定下一条语句
不要使用goto语句

