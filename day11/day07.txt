回顾：
1.一维数组
2.二维数组

预习：
1.函数

作业：
1.生成一张彩票（7个数字，每个数字是1到36之中的一个）彩票中数字的顺序无要求可以出现重复数字
2.修改刚才的彩票程序，避免彩票中出现重复数字
3.身份证校验数组的规则
   身份证中前17个数字分别乘以如下的这组数字（7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2）
   把所有乘积结果求和并除以11取余根据余数从如下一组数字找到校验数字（1, 0, X, 9, 8, 7, 6, 5, 4, 3, 2）
4.把一个二维数组填充成如下内容并打印在屏幕上
11111
22222
33333
44444
55555
5.把一个二维数组填充成如下内容并打印在屏幕上
11112
4     2
4     2
4     2
43333

程序中可以对所有语句进行多层次的分组，最低一级分组的结果叫做函数
函数一定是由一组相关的语句构成的
所有C语言程序都是由一个或者多个函数构成的
每个函数都有自己的名字，不同函数的名字不能一样
每个C语言程序中都必须包含一个叫做main的主函数。
程序从主函数中的第一条语句开始执行，主函数中的最后一条语句结束则程序结束
函数之间的互相协作实现了程序的所有功能
函数之间的互相协作是和时间相关的
两个函数之间的一次协作过程叫做一次函数调用
发起协作的一方叫做调用函数，类似于淘宝上的买家
另外一方叫做被调用函数，类似于淘宝上的卖家
绝大多数函数调用过程中都伴随着数据的传递
每个函数都有一组专门的变量用来实现和其它函数之间的数据传递
数据的传递有两个方向，每个函数使用两组不同的变量实现这两个方向的数据传递
返回值变量用来实现从函数内部向外部传递数据的过程
每个函数的返回值变量最多只有一个
返回值变量只有在函数结束的时刻才能使用
使用return关键字对返回值变量赋值
返回值变量里的数据只能被调用函数使用

演示：
1.编写函数完成2+4的计算
练习：
1.编写函数从键盘读一个整数并把读到的数字报告给主函数
2.编写函数把数字1打印在屏幕上
使用void做返回值类型表示函数不使用返回值变量
如果没有指定返回值变量的类型则计算机缺省认为返回值变量的类型是int
如果没有使用return语句给返回值变量赋值则返回值变量中是任意的数值
使用return语句对返回值变量赋值时尽量保证数字的类型和返回值变量的类型一致。
return语句可以立刻终止函数的执行
标准函数exit可以立刻终止整个程序的运行，需要包含stdlib.h文件。

每个函数都可以有一组形式参数，它们是实现从函数外部向函数内部传递数据功能的变量
形式参数的个数没有限制
形式参数是在函数调用发生的时候临时创建出来的。
在函数执行过程中任何时候都可以使用形式参数
形式参数的内容来自于调用函数提供的一组数据。这组数据叫做实际参数。
使用形式参数传递数据类似于发传真，数据传递结束后有两份。对任何一份的修改不会影响另一份。
练习：
1.编写函数完成两个整数之间的加法计算。
2.编写函数打印任何整数
如果使用void表示形式参数列表则表示函数不使用形式参数
演示：
1.编写函数读取整数
数组做形参则其中的所有变量将参与函数的执行过程。
在函数执行过程中对数组中的变量所做的修改在函数结束后会保留。
数组做形参则需要另外一个形参表示数组中的变量个数和数组形参匹配的实参可以是数组名称。
普通变量做形参只能实现数据从外向内的单向传递，这种形参叫做输入参数
数组做形参可以实现双向数据传递，这种形参叫做输入输出参数

如果被调用函数写在调用函数下面则gcc在编译的时候会采用隐式函数声明的方式声明这个函数
隐式声明的格式中函数的返回值类型是int,参数的个数和类型任意。
隐士声明不可靠，应该采用显示声明（把函数的声明部分写在文件开头。此时可以省略参数的名称）
预习：
1.文件操作
2.递归函数

作业：
1.编写程序打印如下内容
1  X  9 = 9 
.......
5 X 5 = 25  
用函数实现每一行的打印
2.编写一个函数判断一个数字是否是素数
如果从2开始到数字n为止的所有整数都不能把数字n整除就说明数字n是个素数
3.把一个二维数组填充成如下内容并打印在屏幕上
11111
22222
33333
44444
55555
其中每个一维数组要求用一个函数里填充
4.编写一个函数把一个数组中的所有变量颠倒顺序

文件操作相关标准函数
1.fopen函数用于打开一个文件
2.fclose函数用于关闭一个文件
3.fread/fwrite函数用于以二进制方式读写文件
编程演示文件操作程序代码框架

文件打开模式
"r"     :  只能读取数据，从文件头开始，要求文件已经存在
"r+"   : 能读能写，从文件头开始，要求文件已经存在
"w"   :只能写数据，从文件头开始，如果文件不存在则创建文件，如果文件存在则删除其中的所有内容
"w+" :能读能写，从文件头开始，如果文件不存在则创建文件，如果文件存在则删除其中的所有内容
"a"    :只能写数据，如果文件不存在则创建文件，如果文件存在则从文件末尾开始写新数据
"b"    :可以和上面的任何一个方式混合使用,"b"表示以二进制的方式对文件进行操作，只决定每行末尾的处理方式
fopen函数有可能失败
如果fopen函数的返回值作为布尔值使用时相当于true则表示打开成功，否则表示打开失败
每当结束对一个文件的操作以后一定要使用fclose函数关闭这个文件
 
fread/fwrite标准函数的参数
参数一表示一个数组（使用数组名称做实参）
参数二表示单个变量的大小
参数三表示希望读写的变量个数
参数四表示要读写的文件

这两个函数的返回值表示实际读写的变量个数

练习：
1.声明一个二维数组并初始化成如下
1  2  3  4  5  
6  7  8  9  10 
11 12 13 14  15 
16 17 18 19 20
21  22 23 24 25 
编写程序把这个二维数字记录到文件中
编写程序从文件中把二维数组读出来并显示在屏幕上
2.每个人员的信息分成三部分
id用一个整数变量记录
姓名用一个字符数组记录（20个字符变量）
工资用一个单精度浮点数变量记录
编写一个函数通过参数得到一个人的所有信息，然后把这些信息写到文件中。
主函数中使用一个循环读很多人员信息，然后使用上面的函数把它们都记录到文件中
（读姓名的时候使用%s做占位符，使用数组名称和占位符匹配）

会重复调用自己的函数叫做递归函数
递归函数可以实现类似循环的效果

使用递归函数解决问题的思路叫做递归
使用循环解决同样问题的思路叫做递推

递归方法解决某些问题很难用递推方式实现

递归函数的编写原则
1.必须使用分支
2.分支的逻辑表达式中一定要利用函数的参数
3.至少有一个分支不会递归调用自己
4.这个不会递归调用自己的分支必须有机会执行

适合采用递归方式解决的问题符合以下特点
1.问题可以被分解成几个简单问题
2.分解后的结果中至少有一个是原来问题的简化版

预习：
1.变量的生命周期和作用域
2.全局变量，局部变量和块变量
3.指针

回顾：
1.文件操作函数
2.递归函数

作业：
1.编写程序把a.bin文件复制一份并命名为b.bin
2.编写程序把记录人员信息的文件中所有人员信息打印在屏幕上。
（单个人员信息的读取和打印用一个函数实现）
3.编写递归函数计算从1开始连续多个整数的累加

理解递归函数时把参数从简单向复杂推进逐渐理解
编写递归函数时不会递归调用的分支用来解决最简单的情况
其他分支只需要描述清楚问题的拆分方式就可以了

变量有两个重要的属性：生命周期，作用域
这两个属性决定变量在什么时候可以用，什么时候不可以用

作用域指的是变量名可以被使用的所有语句的总和
根据作用域把变量分成了三种：全局变量，局部变量和块变量

全局变量是声明在所有函数之外的变量
没有被初始化的全局变量自动被初始化成0
全局变量的作用域包含程序中的所有语句
局部变量是声明在函数内部的变量
局部变量的作用域包含函数内的所有语句

块变量是声明在语句块中的变量
函数内部的一对大括号构成一个语句块
块变量的作用域包含语句块内的所有语句

生命周期指的变量存在的时间范围
变量在程序执行过程中随时被创建出来，又随时被销毁
全局变量，局部变量和块变量的生命周期也不相同

全局变量的生命周期是整个程序运行期间
局部变量的生命周期是函数运行期间
形式参数可以看成是局部变量
块变量的生命周期是语句块的运行期间
编程演示变量的作用域和生命周期

声明变量时可以使用的关键字
1.auto关键字可以用在局部变量声明的前面
      声明局部变量的时候自动是使用auto关键字修饰的
2.static关键字可以用来声明静态变量静态变量的生命周期和作用域是不一致的（一个大另一个小）
      静态全局变量的生命周期不变，但是作用域缩小成声明它的那个文件内部所有语句的总和
      静态局部变量或静态块变量的作用域不变，但是生命周期被扩大成整个程序运行期间。
      没有初始化的静态变量自动被初始化成0
      静态变量的初始化工作只执行一次
3.const关键字可以声明不可修改的变量const变量只能在初始化的时候赋值
4.volatile关键字可以声明易变的变量
全局变量，局部变量和块变量可以重名
重名变量在使用的时候遵循就近原则作用域包含使用语句的变量中声明语句距离它最近的那个变量

指针变量也是一种变量
指针变量的最大用途是用来表示另外一个普通变量
指针变量包括很多类型，其中一部分指针变量都可以用来表示另外一个普通变量。
指针变量声明语句格式如下
int *p_num
其中p_num是指针变量的名称
*表示变量是指针变量
int表示变量是和整数对应的指针类型
指针变量的主要使用方式是记录一个普通变量的地址。然后可以使用这个指针变量表示那个普通变量。
所有无效的指针变量都应该记录NULL
NULL叫做空地址，它的数值就是0
所有变量的地址都不可能是NULL
没有记录NULL的指针变量叫做野指针
程序中要避免野指针的出现
有效指针变量前边加*可以表示一个普通变量
一条语句中声明多个指针变量则需要在每个变量名前面加*
练习：
1.使用指针变量编程从用户输入的三个整数中找出最大数。（使用交换普通变量内容的方式实现）

使用指针变量之前必须先有普通变量
指针变量在程序的执行过程中也会变化指针变量在不同的时候可能代表不同的普通变量

练习：
1.使用交换指针变量内容的方式改写上一个练习
所有指针类型的大小都一样（和整数一样）
在我们的计算机上是4个字节
指针变量在任意指针类型之间转换都不会丢失数据
指针变量转换类型后再用于表示普通变量时可能造成数据的变化

预习：
1.void*类型的指针
2.指针做函数形参和返回值
3.指针的计算规则
4.指针和数组的关系
5.程序分段
6.字符串

作业：
1.使用指针变量编写程序打印如下内容：
1
12
123
1234
12345
2.使用指针变量对用户提供的三个数字进行排序（不能修改普通变量的内容）