0011  1010           58  
****    ****           -58
10000 0000 

10000  0000  -  0011  1010  

1111  1111  + 1  - 0011  1010 

1111  1111  -  0011 1010  + 1 


1111  1111
0011  1010
1100   0101 +1 = 1100  0110 = -58

使用二进制表示负数时不可以使用-号
负数二进制的计算方法
1.求出相反数（对应非负数）的二进制
2.对这个二进制做按位求反加一
使用上述方法计算出的结果就是补码，可以直接存储在计算机里

0000  0000 

1000  0000
任何数据类型中有两个特殊的二进制数字分别是全0和首位为1其它位为0
后一个数用来表示这个数据类型中的最小数

-41的补码是多少？
41的二进制补码是0010 1001=32+8+1=41  
按位求反得到1101 0110 
加一得到结果1101 0111
32=0010  0000 
8  =0000  1000
1  =0000   0001

根据一个二进制补码计算相反数的二进制补码都可以采用上述办法
画图描述数字之间的关系十进制和二进制的转换的png
所有有符号数据的最高二进制位叫做符号位
符号位为0表示数字是非负数
符号位为1表示数字是负数
无符号数据没有符号位
符号位不能等同于正负号
1000 0000=-128    -000  0000=0不一样，符号位不能变成负号

整数类型之间赋值要保持二进制不变
有符号数据扩充的时候在前面补充符号位

0011  1010           58  
****    ****           -58
10000 0000 

10000  0000  -  0011  1010  

1111  1111  + 1  - 0011  1010 

1111  1111  -  0011 1010  + 1 


1111  1111
0011  1010
1100   0101 +1 = 1100  0110 = -58

使用二进制表示负数时不可以使用-号
负数二进制的计算方法
1.求出相反数（对应非负数）的二进制
2.对这个二进制做按位求反加一
使用上述方法计算出的结果就是补码，可以直接存储在计算机里

0000  0000 

1000  0000
任何数据类型中有两个特殊的二进制数字分别是全0和首位为1其它位为0
后一个数用来表示这个数据类型中的最小数

-41的补码是多少？
41的二进制补码是0010 1001=32+8+1=41  
按位求反得到1101 0110 
加一得到结果1101 0111
32=0010  0000 
8  =0000  1000
1  =0000   0001

根据一个二进制补码计算相反数的二进制补码都可以采用上述办法
画图描述数字之间的关系十进制和二进制的转换的png
所有有符号数据的最高二进制位叫做符号位
符号位为0表示数字是非负数
符号位为1表示数字是负数
无符号数据没有符号位
符号位不能等同于正负号
1000 0000=-128    -000  0000=0不一样，符号位不能变成负号

整数类型之间赋值要保持二进制不变
有符号数据扩充的时候在前面补充符号位


C语言中可以使用(+,-,*,/和%)
,也可以当操作符使用
,可以把两个无关的表达式连接在一起
合并后的结果就是后一个表达式的结果
1+2, 3+4
,操作符的优先级非常低

赋值操作符(=)可以用来改变变量的内容
赋值操作符的左边必须是左值(变量)
赋值操作符的右边必须能当数字使用
赋值操作符的优先级很低，但是比逗号操作符高
一条语句中可以包含多个赋值操作符，它们的计算顺序是从右向左

双目操作符需要和两个数字联合使用
很多双目操作符可以和赋值操作符合并形成复合赋值操作符(+=,-=,*=,/=...)
复合赋值操作符也是双目操作符
复合赋值操作符也要求左边是变量，右边是可以当数字使用的
num += 6;等同于num = num + 6;
复合赋值操作符中的双目操作符优先级和赋值操作符一样低
自增（++）和自减（--）也是c语言中可以使用的操作符，用于对一个变量进行加一或减一操作。
它们都是单目操作符
它们只能对变量进行操作
分成前操作和后操作两种
前操作的优先级非常高，后操作的优先级最低
不要在一条语句中对同一个变量进行多次自增或自减计算（结果不确定）
布尔值包括真(true)或假(false)
布尔类型(bool)用来描述布尔值
为了使用布尔类型需要把stdbool.h文件合并进来
布尔值在计算机内部仍然使用整数表示，真用1表示，假用0表示
C语言中所有整数都可以当布尔值使用，0当成false,所有其他整数都当成true

逻辑操作符用来编写逻辑表达式
逻辑表达式的计算结果必须是布尔值
双目逻辑操作符包括==,!=,>,<,>=,<=

!是一个单目逻辑操作符，它可以对一个布尔值求反
逻辑操作符比算数操作符的优先级低
3<7<5
3<7 && 7<5
多个逻辑关系之间需要使用与(&&)和或(||)连接
只有当所有基本表达式的计算结果都是true的时候与(&&)连接后的复杂表达式结果才是true，否则就是false
只要有一个基本逻辑表达式的计算结果是true，则用或(||)连接后的复杂表达式计算结果就是true

与(&&)和或(||)都具有短路特征，当前面的逻辑表达式能决定整个表达式的结果时后面的内容根本就不计算
练习：
     1.把年龄分成如下几个段落
          0  -- 10  儿童
          11 --19   少年
           20-- 35  青年
           36 -- 55  中年
           56 --       老年
有一个变量age记录了一个年龄数据，编写一个逻辑表达式当age变量中的年龄属于少年或中年的时候计算结果为true,
否则计算结果为false.
((age >= 11) && (age <= 19)) || ((age >= 36) && (age <= 55))

位操作符用来对二进制形式进行计算双目位操作符包括按位与(&),按位或(|)以及按位异或(^)
双目位操作符都是先把参与计算的数据的二进制形式表示出来，然后让两个数字的对应数位进行计算


按位与(&)把对应数位上的数字进行与计算
0  &  0   0 
0  &  1   0
1  &  1   1 

     3               0000  0011
&  5               0000  0101
                      0000  0001
按位与可以把一个数字中的某些二进制数位清楚成0
某个数位和0做按位与结果一定是0
某个数位和1做按位与结果不变


按位或(|)把对应数位上的数字进行或计算
0  | 0   0 
0  | 1   1  
1  | 1   1 

     3               0000  0011
|    5               0000  0101
                      0000  0111
按位或可以把一个数字中的某些数位设置成1
某个数位和0做按位或结果不变
某个数位和1做按位或则结果是1

按位异或(^)把对应数位上的数字进行异或计算
0 ^ 0   0
1 ^ 0   1
1 ^ 1   0

      3               0000  0011
^    5               0000  0101
                       0000  0110
按位异或可以把一个数字中的某些数位求反
某个数位和0做按位异或结果不变
某个数位和1做按位异或结果变成相反数字

预习：
1.其他位操作符
2.三目操作符
3.类型转换
4.分支（if,switch...case）
5.循环（for）

作业：
1.如果年份可以被4整除但不能被100整数则这个年份是闰年
如果年份可以被400整除则它也是闰年
假设变量year中记录了一个年份，编写一个逻辑表达式当这个年份是闰年的时候结果为true,否则为false
2.使用一个char类型变量ch的最低三个二进制位控制红绿灯。bit0控制绿灯，bit1控制黄灯，bit2控制红灯。如果数位上是1则
对应的灯点亮，如果是0则熄灭。
1）编写语句在不知道变量内容的情况下点亮红灯，熄灭另外两个灯
ch = ch & 0xf8 | 4;
2）如果现在绿灯点亮，另外两个灯熄灭。编写语句熄灭绿灯，点亮黄灯。
****  *001
****  *010
ch = ch ^ 0000  0011=ch ^ 3

回顾：
1.负数的二进制补码
2.c语言中的操作符

移位操作指把变量的所有二进制位整体向左或者向右移动n位
左移使用操作符<<表示
右移使用操作符>>表示
移位操作符要求左右两边各是一个可以当数字使用的东西
左边的数字是要被进行移位操作的数字
右边的数字是移动的位数

在移位操作过程中有些二进制位上的数被丢弃有些二进制位用新数字填充
左移操作中空出来的二进制位上一定填充0

有符号数字右移后所有空出来的二进制位上填充符号位
无符号数字右移后空出来的二进制位上填充0
如果移动过程中没有丢失有效数据则
向左移动n位相当于乘以2的n次方，
向右移动n位相当于除以2的n次方。

~是一个单目位操作符，表示按位求反这个操作符的右边需要提供一个数字，例如~8
&是取地址操作符，这个操作符的右边需要跟着一个变量，地址数据对应的占位符是%p
*操作符可以利用地址数据表示变量这个操作符的右边需要跟着一个地址数据

三目操作符需要三个信息配合才能编写出一个完整的表达式
这种表达式可以根据一个布尔值从两个简单表达式中选择一个来进行计算。
被选择的这个简单表达式的计算结果就是整个三目表达式的计算结果
三目表达式的格式如下：布尔值？简单表达式1：简单表达式2
练习：
1.计算一个给定整数的绝对值
2.编写程序完成简单加减法计算，用户输入两个数字和一个计算符号（只能是+或者-），程序把计算结果打印出来。

一个表达式中如果包含多个不同类型的数据则必须首先把它们转换成同一个类型，然后才能计算。
这个转换过程是由计算机自动完成的，叫做隐式类型转换。
隐式类型转换过程中会把占空间小的数据转换成占空间大的数据（用三目操作符演示）
如果所占空间大小一样但是类型不同则按照int转float，有符号转无符号的规则进行转换
可以在程序中任何时候任意给一个数字指定数据类型这叫做强制类型转换
强制类型转换不受任何规则的限制，可以任意指定数据类型。这有可能造成错误。
强制类型转换的实现方法是临时创建一个新数据并用旧数据进行赋值
强制类型转换不会修改原数据

流程控制语句可以改变语句的执行顺序，让程序不再从上到下顺序执行语句。
分支语句可以在程序执行的时候决定哪些语句应该执行，哪些语句不应该执行
用负数和非负数的例子演示
if语句是一种实现分支的语句，格式如下
if(逻辑表达式1){  //有且只能有一个 
    语句组1
}
else if(逻辑表达式2){  //个数不限
    语句组2
}
else {  //最多一个 
    语句组3
}
else关键字表示多个分叉之间是对立的
如果所有逻辑表达式是互补的则可以省略最后一个逻辑表达式

练习：
1.考试成绩分成如下几个区域
90   ---  100   优
80   ---   89    良
70   ---   79    中
60   ---   69    差
59及以下        不及格
编写程序根据用户提供的一个考试成绩打印出对应的等级
2.找出用户给定三个数字中的最大值
switch...case语句也是一种实现分支的语句格式如下
switch(表达式){
case  数字1:
        ...
        break;
case  数字2:
        ...
        break;
....
default:
        ...
        break;
}
循环语句也是一种流程控制语句
它可以让一段语句反复执行（最后一条语句结束后再从头开始执行）
for语句是一种循环语句
在循环语句的执行过程中有一个不断变化的变量，它代表了一组规律性变化的数字。
这个变量叫做循环变量
确定下这组数字中的开始数字和结束数字
for语句格式如下
for(把循环变量赋值成开始数字;
所有数字和结束数字之间的逻辑关系;
循环变量的变化规律){
     反复执行的语句
}

每次大括号内的语句执行时循环变量都代表某个数字。
大括号内的语句在不同的时候执行，循环变量所代表的数字一定不同
整个执行完成以后循环变量会把每个数字都代表一遍
