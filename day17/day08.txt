回顾：
1.递归
2.变量的生命周期和作用域
3.指针


作业：
1.使用指针变量编写程序打印如下内容：
1
12
123
1234
12345
2.使用指针变量对用户提供的三个数字进行排序（不能修改普通变量的内容）
1.打印图形
2.数字排序

预习：
1.void*类型的指针
2.指针做函数形参和返回值
3.指针的计算规则
4.指针和数组的关系
5.程序分段
6.字符串

void*是一种通用指针类型，可以记录任意地址数据
这种指针变量只表示内部记录了一个地址数据，关于这个数据的其它信息都一无所知
这种指针不能直接用于获取数据（必须首先强制类型转换成具体类型的指针）
通用类型指针通常用来记录来源不明并且可能性很多的地址数据

指针变量可以作为函数的形式参数使用
指针变量做形式参数时它所对应的普通变量直接参与函数的执行（会被函数内部的语句改变）
跟数组做形参一样本质上就是指针做形参
用指针变量做形参也可以实现数据的双向传递

练习：
1.编写函数交换主函数中两个变量的内容

演示void*做形参
编写函数打印三种不同类型的变量

指针变量也可以作为函数的返回值使用
指针变量做返回值可以用来表示一个变量而不仅仅是一个数字。
演示获得最大数和获得最大变量的函数
用指针变量做函数的返回值时不可以把局部或块变量的地址赋值给这个返回值（生命周期结束了）
指针变量支持如下的四则计算
指针 + 整数，指针 - 整数， 指针 - 指针
计算过程不是按照数学规则进行的
计算结果和指针的类型有关

把数组名称赋值给一个指针变量后这个指针变量可以在某些时候代替这个数组
数组名称和指针的差异
1.数组名称不可以赋值，指针可以赋值++
2.进行sizeof计算后结果不同
3.数组名称取地址后数值不变，指针变量取地址后数值改变

可以使用指针作为循环变量依次处理数组中的每个变量

声明指针变量的时候也可以使用const关键字，有两种声明const指针的方法
const int *p_num;
上面的指针变量不可以用来修改对应普通变量的内容，但是指针本身可以被赋值
int * const p_num;   （const在谁前面谁就不可以被赋值，另一个就可以被赋值）
上面的指针变量本身不可以被赋值，但是用它表示的普通变量可以被赋值
const int * const p_num (指针和变量都不可以被赋值)

程序在内存中是分段落保存的
代码段      存放程序中的所有语句，在运行时不可以被修改
全局段      存放全局变量和静态变量大小不随着程序的运行而改变
栈            存放局部变量，块变量，形式参数，返回值，大小随着程序的运行不断变化，
               变化方式遵循后进先出的规则，每个函数在栈中有自己的私有空间
               函数运行结束后它的私有空间被计算机回收

堆            存放动态分配的变量，这些变量的生命周期由程序来控制           

字符串是由一组字符变量构成的
这些字符变量在内存中必须是连续存放的
这组字符变量必须以'\0'作为结尾

使用第一个字符变量的地址表示整个字符串
字符串的地址可以保存在char*类型的指针变量中

字符串字面值是字符串的一种表示方式，例如"abc","def"等
字符串字面值在编译好以后会被用首字符地址替换掉
字符串字面值存储在专门的段落里，这个段落中的内容不可以被修改
同样内容的字符串字面值在计算机里只保存一份
两个连续的字符串字面值会被合并成一个
字符串字面值在编译的时候会被自动加上'\0'字符

可以在程序中使用字符数组表示字符串
需要在程序中保证最后是以'\0'做结尾的
可以使用字符串字面值给字符数组进行初始化。这时最后的'\0'会被自动加入到字符数组中。
初始化完成后字符串字面值和字符数组在内存中存放在两个不同的地方
字符数组在内存中存放的段落不确定，但是一定是可以修改的。
C语言提供多种标准函数对字符串进行操作
这些标准函数需要包含string.h文件
strlen  计算字符串中有效字符的个数
strcat  可以把两个字符串合并成一个。用返回值表示合并后的结果。会修改原有字符串，有可能造成数组越界
strncat 功能和strcat类似，可以避免数组越界问题
strcmp  可以比较两个字符串的大小比较的依据是ASCII码需要两个字符串做参数，执行过程中不会修改参数字符串，
            用返回值表示比较结果（1表示前一个字符串大，0表示相等，-1表示后一个字符串大）
strncmp  只比较前n个字符
strcpy      可以实现字符串的拷贝功能，使用一个字符数组作为拷贝的目标，这个函数也可能造成数组越界
               使用返回值表示拷贝结果字符串
strncpy    只拷贝字符串中前n个字符

预习：
1.字符串的读取
2.多个相关字符串的表示方法
3.文件的位置指针

回顾：
1.通用类型指针
2.指针做函数的形式参数
3.指针变量做函数的返回值
4.指针变量支持的四则计算
5.指针和数组的关系
6.const指针
7.程序分段
8.字符串
9.字符串相关标准函数

作业：
1.编写mystrlen的函数
2.编写mystrcat函数
3.编写mystrcpy函数

预习：
1.字符串的读取
2.多个相关字符串的表示方法
3.文件的位置指针

字符串可以使用%s做占位符
在读字符串的时候需要事先准备一个char数组并用数组名称和占位符配对
使用scanf从键盘上读字符串会出问题（字符串中带空格和字符串数组过长越界问题）
fgets函数可以从任何文件读字符串并放置在一个数组中
在Linux系统中所有设备都可以当成文件使用
stdin表示标准输入设备文件，通常就是键盘
fgets函数需要三个参数
1.字符数组名称
2.字符数组中的变量个数
3.读取的文件

有可能把输入时最后输入的换行符读到字符数组中
需要考虑清理输入缓冲区的问题（换行字符没有出现在字符数组中的时候就应该清理输入缓冲区）

带参数的宏 参数不能是多次计算之后的数值
MAX(i++,j++);//错误
结果是不可预期的

练习：
1.编写程序实现模拟登录效果
固定用户名是admin
固定密码是123456
一共三次输入机会

练习3：假设
int i=5,j=7;
int *q = &i,*r=&j;
现在我们可以说指针q指向i,指针r指向j。
编程使用函数实现:指针q指向j,指针r指向i。
q->j,  r->i

多个相关字符串的保存方式有两种
1.二维字符数组
     造成内存空间的浪费

练习
1.编写程序从键盘读到一个包含多个成绩的字符串，不同成绩之间使用,分割。例如（4,47,93,100）
把每个成绩单独制作成一个字符串并一起记录在一个二维字符数组中。最后把每个成绩在屏幕上打印出来成绩最多
不会超过10个

2.字符指针数组
多个字符指针变量合并形成的数组就是字符指针数组
字符指针数组声明如下
char *p_strs[10]
其中p_strs表示数组名称，char*表示数组中变量的类型
指针数组名称对应的指针类型是二级指针
二级指针声明如下
char **pp_str 
二级指针可以用来表示它自己，一个一级指针和一个普通变量。

主函数的参数演示

文件的位置指针决定了下一次读写操作开始的位置
位置指针是一个整数，这个整数表示位置指针到文件头的距离
位置指针会随着读写操作自动调整
ftell标准函数可以获得当前位置指针的数值
rewind标准函数可以把位置指针调整到文件开头
fseek标准函数可以把位置指针调整到文件中任何地方
SEEK_SET    1  表示文件的开头
SEEK_CUR   2  表示当前位置指针的位置
SEEK_END   3  表示文件的结尾

回顾：
1.字符串读取
2.多个相关字符串保存（二维数组和指针数组和二级指针）
3.主函数的参数
4.文件的位置指针

预习：
1.预处理指令（宏，条件编译。。。。）
2.多文件程序的编写
3.结构体

作业：
1.编写程序根据用户给定的id从文件中找到对应的人员信息并打印在屏幕上
2.根据id查找人员信息

预处理指令是C语言支持的一种特殊指令
预处理指令以#做开头，不以;做结尾
预处理指令在编译的第一个阶段被处理
所有预处理指令都是用来修改程序源代码的
gcc支持-E选项可以查看预处理后的源代码

#define是一个预处理指令
这个预处理指令用来定义宏
宏可以用来给数字起名字


演示用宏给数字起名字

编写宏时名字要写在前面，其它内容写在后面
用宏给数字起名字的时候不要使用赋值操作符
宏名称中不能有空格
宏是在编译的时候直接用数字替换掉名字
宏和变量是不同的
编写程序时就能确定的数字并且在程序执行过程中绝对不会改变。这样的数字可以记录在const变量中。
如果编写程序时不能确定数值必须得在编译得时候才能确定。这样的数字应该使用宏来表示。

练习：
1.声明一个数组并用0到9之间的数字进行初始化。在编译时才能确定数组中的变量个数。

在使用gcc编译的时候可以通过-D选项给宏指定数值gcc  -DSIZE=6  03macro.c
宏同样可以给一个计算公式起名字
宏可以使用参数表示计算公式中还不能确定的部分
宏的参数没有数据类型(宏的参数不仅仅用来表示数字)

练习：
1.编写一个带参数的宏计算圆的面积

函数有自己的变量空间而宏没有
宏没有返回值变量
如果一个宏需要计算出一个结果数字则宏要编写成一个表达式
练习：
1.编写一个宏计算两个数字中的最大值
2.编写一个宏把一个十六进制数位转换成十进制数字

宏没有形式参数，宏内部直接对参数进行操作
编程演示自增效果说明宏和函数对参数处的不同

编程演示相反数的宏说明
1.宏的每个数字参数都应该被包含在小括号内
2.宏的整个表达式应该包含在小括号内

练习：
1.编写一个宏计算两个数字的乘积

不要使用自增或自减的计算结果作为宏的参数
宏操作符(#,##)这两个操作符都只能针对不代表数字的参数使用
#操作符可以直接把一个参数转换成字符串字面值（前后各加一个双引号）
##操作符针对一个代表标识符的参数进行操作。可以把这个标识符和其它内容连接起来形成一个新的标识符。

条件编译指编译的时候有选择性的编译某些语句而忽略另外的语句
#ifdef/#ifndef...#else...#endif结构可以根据某个宏是否曾经被定义过而从两组语句中选择一组编译

练习：
1.点菜程序
1表示龙虾，2表示小鸡炖蘑菇
普通客人点菜的时候1回答有，2回答没有
赵点菜的时候1回答没有，2回答这个真没有

#if...#elif(n次)...#else(可有可无)...#endif
以上的结构也可以实现条件编译
可以根据任何布尔值从多个语句组中选择一组进行编译
以上结构中布尔值计算过程中可以使用任何逻辑操作符

练习：
1.三个不同等级的专卖店
精品店（120%），普通店（100%），工厂店（80%）

多文件程序编写时每个函数必须属于某一个文件，一个文件中可以包含多个函数。
多文件程序编译时需要在gcc命令后写上所有.c源文件的名字
多文件程序编写时一般使用一个.c源文件存储主函数。其它函数存储在另外的.c源文件中。
为除了包含主函数的文件以外的每个.c源文件编写一个对应的.h文件(头文件)头文件中应该包含对应.c文件中的所有函数的声明。
每个.c源文件应该包含对应的.h头文件，如果一个.c源文件中使用了某个.h头文件中声明的函数则也应该包含它。
头文件编写时需要使用条件编译把所有内容包含起来
头文件中用来控制条件编译的宏名称应该和头文件名一一对应
使用extern关键字声明全局变量可以让当前文件中的语句使用其他文件中的全局变量。
静态全局变量不可以被其他文件中的语句使用。

预习：
1.结构体
2.数据对齐和补齐
3.联合
4.枚举
5.冒泡排序


回顾：
1.预处理指令
2.多文件程序编写

作业：
1.编写一个宏完成字符变量的大小写转换
2.用多文件的方法编写一个生成彩票的程序。彩票数据保存在一个全局数组中

结构体可以把多个不同类型的变量合并成一个整体
结构体仅仅描述了数据之间的结构关系，它并不在内存中占据实际的位置。结构体可以当成数据类型使用。
使用结构体声明的变量叫结构体变量，它们才真正在计算机内存中占据实际的位置。
声明结构体时需要使用关键字struct.
结构体声明中的所有变量声明仅仅描述了数据之间的关系而不会真正产生变量。
可以在声明结构体的时候直接声明结构体变量。（这个时候可以省略结构体名称）
可以使用如下语句声明结构体变量
struct  phone iphone4;
其中struct phone作为数据类型，iphone4作为结构体变量名称
结构体声明语句可以放在头文件中
C语言中结构体声明语句里不可以包含函数声明
typedef关键字可以用来给数据类型起别名，绝不可以和#define混淆。

练习：
1.编写结构体声明语句表示屏幕上的一个点
2.编写程序计算两个点作为对角线的矩形的面积
3.编写成绩计算两个点构成直线的中点位置

结构体可以采用类似数组的初始化语法
使用.操作符获得结构体变量中的各个具体变量

同类型的结构体变量之间可以直接赋值
使用计算中点的程序演示结构体作为函数形参和返回值的问题
不要使用结构体变量本身作为形参而应该使用结构体指针变量
不要使用结构体变量本身作为函数的返回值而应该使用结构体指针变量
通过结构体指针表示结构体内部各变量时要使用->操作符

任何变量的地址一定是它自身大小的整数倍double类型变量的地址必须是4的整数倍
这个规则叫做数据对齐
数据对齐就造成结构体内部各变量之间的空隙

结构体内部各成员之间的顺序不同就可能导致结构体变量的大小不同
结构体变量的大小必须是内部占地最大成员变量的整数倍(double类型的成员按照4个字节计算)
这个叫做数据补齐
数据补齐会造成结构体最后有一些浪费的字节

练习：
1.每个日程包括时间和内容两部分编程从键盘上读多个日程信息并记录在数组中。
最后把所有日程信息都打印在屏幕上。使用一个函数读每个日程信息
使用另外一个函数打印每个日程信息
2.把上一个练习改成用多文件方式编写

枚举类型可以把一组名字转换成数字
计算机会把枚举类型中所有名字依次转换成整数(从0开始)
如果不要求名字转换成的数字数值就可以使用枚举实现
如果明确要求名字转换成的数字数值就只能使用宏定义实现

练习：
1.定义一个枚举类型，其中包括男和女两个项目，根据用户在键盘上输入的一个整数是否为奇数判断男女并把
结果打印在屏幕上。


联合也可以用来描述一组变量之间的关系
在联合中声明的所有成员变量都从同一个地址开始分配
联合可以用不同的方式操作同一块内存空间
对联合中任何一个成员所做的修改会影响其它成员
联合变量的大小是其中占地最大的成员变量的大小

预习：
1.复习指针
2.动态内存分配
3.二级指针做形参

回顾：
1.结构体
2.枚举
3.联合

作业：
1.简化版的贪吃蛇
无限大的地图，地图上分很多格子，每个格子用两个整数表示它的位置
上小下大，左小右大
一条蛇占三个格子
每次移动一个格子，由用户在键盘上输入的内容决定移动的方向
不能走回头路
每次蛇移动一个格子后把新位置打印在屏幕上

指针是用来存储地址数据的变量
NULL表示空地址
记录无效地址的指针叫做野指针

指针变量可以参与如下四则计算
指针  +  整数，  指针  - 整数， 指针 - 指针
这些计算过程中的所有整数都是有单位的这个单位由指针的类型决定

指针可以作为函数的参数和返回值
局部变量和块变量的地址不可以赋值给指针类型的返回值变量
声明数组作为函数的形参，计算机内部实际使用指针变量代替

指针和数组的关系
1.指针变量可以赋值但是数组名称不可以赋值
2.使用sizeof计算时指针变量和数组名称的计算结果不同
3.对数组名称取地址结果的数值和数组名称的数值一样，但是类型变成二维数组。
（数组名称取地址以后可以使用两个下标）
对指针变量取地址得到的还是一个地址数据这个地址需要经过两次计算才能找到普通变量
这种地址数据应该记录在二级指针变量中
二级指针和二维数组之间没有关系
二级指针和指针数组之间类似于一级指针和一维数组名称间的关系
声明指针时可以有两种使用const关键字的方法
使用指针变量可以修改const变量的数值
通用类型指针没有说明地址数据的来源和级别
通用类型指针在使用之前必须先进行类型转换
类型转换分为隐式类型转换和强制类型转换两种
隐式类型转换由计算机按照一定规则自动完成
强制类型转换由程序员在语句中指定。
整数类型之间进行的转换会保持二进制不变。
在转换过程中生成新的变量而不会改变原有变量的内容
强制类型转换有可能造成数据丢失 

堆的管理函数
需要包含stdlib.h的头文件
malloc函数用来从堆中分配连续多个字节空间
malloc会把分配好的第一个字节的地址作为返回值，这个地址要长期保存
如果执行失败则返回NULL
函数的返回值类型是void*指针

free函数用来释放堆中分配好的一段内存空间
必须保证程序结束之前所有从堆中分配的内存空间都使用free释放掉了。
使用free函数释放内存空间时必须把空间里第一个字节的地址作为参数
每段内存空间只能释放一次
一次分配的内存空间必须一次释放掉
使用malloc函数获得的地址可以赋值给指针类型的返回值变量（要求在函数中没有使用free释放掉内存空间）
这种时候内存空间应该由主函数释放
练习：
1.编写一个函数分配多个变量的内存空间。（变量的类型可能是char,short和int。变量的个数由调用函数指定。）
2.给定两个点的位置，计算出中间点的位置。（用函数实现）
3.编写函数实现字符串拷贝和合并。（新字符串要求从堆中分配内存空间）

calloc函数可以从堆中分配n个某类型的变量。把分配好的所有变量都清0.
calloc函数需要两个参数，分别表示单个变量的大小以及变量个数
realloc函数可以调整一段已经分配好的内存空间的大小

使用二级指针作为函数的形参可以让函数外部的指针变量参与函数的执行过程，函数可以修改这个指针变量。
预习：
1.函数指针
2.排序算法（qsort）
3.常用的其它标准函数

作业：
1.改写mystrcpy函数，要求不使用返回值变量并且从堆中分配新字符串的内存空间
2.改写人员信息关系系统编写一个函数从键盘读一个人员信息并把它们记录在堆中分配的一个结构体变量里。
把这个新结构体变量的地址赋值给返回值变量。
3.编写主函数使用上一个函数从键盘读多个人员信息并记录到文件中。

回顾：
1.指针知识回顾
2.堆管理函数

函数指针用来记录函数的地址
函数指针可以用来调用函数
函数名称可以当地址数据使用，这个地址就是这个函数的地址
可以使用赋值操作符把一个函数的地址赋值给一个函数指针变量
当函数指针被赋值后就可以当成函数使用了
演示：
1.用简单四则计算公式的计算过程演示函数指针的用处
使用函数指针可以在程序运行的时候才确定某条语句具体使用哪个函数
修改上面的演示，要求一次读入三个计算公式然后分别计算。（演示结构体中记录函数指针）
结构体中可以包含函数指针变量
这样可以针对不同的结构体变量采用不同的函数处理
可以事先把函数和数据之间的关系确定下来，以后才真正进行处理

qsort函数用来对数据进行排序
qsort函数采用快速排序算法

使用整数排序问题演示qsort函数的使用
练习：
1.把刚才练习中的排列顺序改成从大到小排序
2.用一个结构体记录一个学生的三个成绩。使用qsort函数对由5个结构体变量构成的数组进行排序。顺序是按照总成绩从小
到大排列。

演示使用qsort对指针数组排序
atoi标准函数可以把字符串中的数字转换成整数变量
atof标准函数可以把字符串中的数字转换成double类型的变量
以上两个函数需要包含头文件stdlib.h

sqrt函数可以计算一个数字的平方根
需要包含头文件math.h
编译的时候需要加-lm选项

pow函数可以计算一个数字的幂
需要包含头文件math.h
编译的时候需要加-lm选项
sleep函数可以让进程休眠指定的秒数
休眠时间不精确
需要包含unistd.h头文件
使用秒表程序演示sleep函数的使用

在以下四个条件下输出缓冲区里的内容会被显示在屏幕上
1.遇到\n
2.函数结束
3.输出缓冲区满了
4.使用fflush(stdout)函数强制显示

sprintf/sscanf函数可以对一个字符串进行格式化的读写操作
fprintf/fscanf函数可以对一个文件进行格式化的读写操作

练习：
1.编写函数把一个人员信息文件中除了某个给定id以外的人员信息拷贝到另外一个文件中。
